name: Build

on:
  push:
    branches:
      - main
      - dev
      - 'release/**'
    tags:
      - '**'
  release:
    types: [published]
  pull_request:
    branches:
      - '**'

concurrency:
  # SHA is added to the end if on `main` to let all main workflows run
  group: ${{ github.ref }}-${{ github.workflow }}-${{ github.event_name }}-${{ (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' || startsWith(github.ref, 'refs/heads/release/')) && github.sha || '' }}
  cancel-in-progress: true

env:
  NPROC: 2

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [amd64]
        include:
        - os: macos-latest
          arch: arm64
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60

    name: ${{ matrix.os }} - ${{ matrix.arch }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
  
    - name: Get submodules hash
      id: submodules
      shell: bash
      run: |
        echo "hash=$(git submodule status | awk '{print $1}' | sort | shasum -a 256 | sed 's/[ -]*//g')" >> $GITHUB_OUTPUT
  
    - name: Cache submodules
      uses: actions/cache@v3
      with:
        path: |
          vendor/
          .git/modules
        key: ${{ runner.os }}-${{matrix.arch}}-submodules-${{ steps.submodules.outputs.hash }}
  
    - name: prep variables
      id: vars
      shell: bash
      run: |
        SYNAPSE_ARTIFACT_NAME=$(echo "synapse-${{matrix.arch}}-${{runner.os}}.tar.gz" | tr "[:upper:]" "[:lower:]")
  
        echo "synapse=${SYNAPSE_ARTIFACT_NAME}" >> $GITHUB_OUTPUT

    - name: Add Msys64 to PATH
      if: matrix.os == 'windows-latest'
      run: echo "/c/msys64/mingw64/bin:/c/msys64/usr/bin" >> $GITHUB_PATH
      shell: bash
        
    - name: Install dependencies
      shell: bash
      run: |
        gcc -print-prog-name=cc1
        
        if [[ "${{runner.os}}" == "macOS" ]]; then
          OS=macosx
        elif [[ "${{runner.os}}" == "Linux" ]]; then
          OS=linux
        else
          OS=Windows_NT
        fi
  
        make -j${NPROC} NIMFLAGS="--parallelBuild:${NPROC} -d:disableMarchNative --os:${OS} --cpu:${{matrix.arch}}" CFLAGS="-D__USE_MINGW_ACCESS" V=1 update
        make -j${NPROC} NIMFLAGS="--parallelBuild:${NPROC} -d:disableMarchNative --os:${OS} --cpu:${{matrix.arch}} -d:postgres" CI=false synapse
        tar -cvzf ${{steps.vars.outputs.synapse}} ./build/
  
    - name: Upload asset
      uses: actions/upload-artifact@v2.2.3
      with:
        name: ${{steps.vars.outputs.synapse}}
        path: ${{steps.vars.outputs.synapse}}
        if-no-files-found: error
    
    - name: Upload release artifacts
      if: env.RELEASE == 'true'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        BPX_INSTALLER_VERSION: ${{ steps.version_number.outputs.BPX_INSTALLER_VERSION }}
      run: |
        gh release upload $env:RELEASE_TAG ${{steps.vars.outputs.bpxmq}}
